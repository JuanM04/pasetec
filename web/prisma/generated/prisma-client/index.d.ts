// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  log: (where?: LogWhereInput) => Promise<boolean>;
  metadata: (where?: MetadataWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  log: (where: LogWhereUniqueInput) => LogNullablePromise;
  logs: (args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Log>;
  logsConnection: (args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LogConnectionPromise;
  metadata: (where: MetadataWhereUniqueInput) => MetadataNullablePromise;
  metadatas: (args?: {
    where?: MetadataWhereInput;
    orderBy?: MetadataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Metadata>;
  metadatasConnection: (args?: {
    where?: MetadataWhereInput;
    orderBy?: MetadataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MetadataConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLog: (data: LogCreateInput) => LogPromise;
  updateLog: (args: {
    data: LogUpdateInput;
    where: LogWhereUniqueInput;
  }) => LogPromise;
  updateManyLogs: (args: {
    data: LogUpdateManyMutationInput;
    where?: LogWhereInput;
  }) => BatchPayloadPromise;
  upsertLog: (args: {
    where: LogWhereUniqueInput;
    create: LogCreateInput;
    update: LogUpdateInput;
  }) => LogPromise;
  deleteLog: (where: LogWhereUniqueInput) => LogPromise;
  deleteManyLogs: (where?: LogWhereInput) => BatchPayloadPromise;
  createMetadata: (data: MetadataCreateInput) => MetadataPromise;
  updateMetadata: (args: {
    data: MetadataUpdateInput;
    where: MetadataWhereUniqueInput;
  }) => MetadataPromise;
  updateManyMetadatas: (args: {
    data: MetadataUpdateManyMutationInput;
    where?: MetadataWhereInput;
  }) => BatchPayloadPromise;
  upsertMetadata: (args: {
    where: MetadataWhereUniqueInput;
    create: MetadataCreateInput;
    update: MetadataUpdateInput;
  }) => MetadataPromise;
  deleteMetadata: (where: MetadataWhereUniqueInput) => MetadataPromise;
  deleteManyMetadatas: (where?: MetadataWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  log: (
    where?: LogSubscriptionWhereInput
  ) => LogSubscriptionPayloadSubscription;
  metadata: (
    where?: MetadataSubscriptionWhereInput
  ) => MetadataSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LogType =
  | "USER_CREATED"
  | "USER_UPDATED"
  | "VIAJE_USED"
  | "VIAJES_ADDED";

export type LogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "date_ASC"
  | "date_DESC"
  | "data_ASC"
  | "data_DESC";

export type MetadataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "pasePrice_ASC"
  | "pasePrice_DESC"
  | "viajePrice_ASC"
  | "viajePrice_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "dni_ASC"
  | "dni_DESC"
  | "viajes_ASC"
  | "viajes_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<LogType>;
  type_not?: Maybe<LogType>;
  type_in?: Maybe<LogType[] | LogType>;
  type_not_in?: Maybe<LogType[] | LogType>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LogWhereInput[] | LogWhereInput>;
  OR?: Maybe<LogWhereInput[] | LogWhereInput>;
  NOT?: Maybe<LogWhereInput[] | LogWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  uid?: Maybe<String>;
  uid_not?: Maybe<String>;
  uid_in?: Maybe<String[] | String>;
  uid_not_in?: Maybe<String[] | String>;
  uid_lt?: Maybe<String>;
  uid_lte?: Maybe<String>;
  uid_gt?: Maybe<String>;
  uid_gte?: Maybe<String>;
  uid_contains?: Maybe<String>;
  uid_not_contains?: Maybe<String>;
  uid_starts_with?: Maybe<String>;
  uid_not_starts_with?: Maybe<String>;
  uid_ends_with?: Maybe<String>;
  uid_not_ends_with?: Maybe<String>;
  dni?: Maybe<Int>;
  dni_not?: Maybe<Int>;
  dni_in?: Maybe<Int[] | Int>;
  dni_not_in?: Maybe<Int[] | Int>;
  dni_lt?: Maybe<Int>;
  dni_lte?: Maybe<Int>;
  dni_gt?: Maybe<Int>;
  dni_gte?: Maybe<Int>;
  viajes?: Maybe<Int>;
  viajes_not?: Maybe<Int>;
  viajes_in?: Maybe<Int[] | Int>;
  viajes_not_in?: Maybe<Int[] | Int>;
  viajes_lt?: Maybe<Int>;
  viajes_lte?: Maybe<Int>;
  viajes_gt?: Maybe<Int>;
  viajes_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type MetadataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MetadataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  pasePrice?: Maybe<Int>;
  pasePrice_not?: Maybe<Int>;
  pasePrice_in?: Maybe<Int[] | Int>;
  pasePrice_not_in?: Maybe<Int[] | Int>;
  pasePrice_lt?: Maybe<Int>;
  pasePrice_lte?: Maybe<Int>;
  pasePrice_gt?: Maybe<Int>;
  pasePrice_gte?: Maybe<Int>;
  viajePrice?: Maybe<Int>;
  viajePrice_not?: Maybe<Int>;
  viajePrice_in?: Maybe<Int[] | Int>;
  viajePrice_not_in?: Maybe<Int[] | Int>;
  viajePrice_lt?: Maybe<Int>;
  viajePrice_lte?: Maybe<Int>;
  viajePrice_gt?: Maybe<Int>;
  viajePrice_gte?: Maybe<Int>;
  AND?: Maybe<MetadataWhereInput[] | MetadataWhereInput>;
  OR?: Maybe<MetadataWhereInput[] | MetadataWhereInput>;
  NOT?: Maybe<MetadataWhereInput[] | MetadataWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  uid?: Maybe<String>;
  dni?: Maybe<Int>;
}>;

export interface LogCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  type: LogType;
  date: DateTimeInput;
  data?: Maybe<Json>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  uid: String;
  dni: Int;
  viajes?: Maybe<Int>;
}

export interface LogUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  type?: Maybe<LogType>;
  date?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  uid?: Maybe<String>;
  dni?: Maybe<Int>;
  viajes?: Maybe<Int>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface LogUpdateManyMutationInput {
  type?: Maybe<LogType>;
  date?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface MetadataCreateInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  pasePrice?: Maybe<Int>;
  viajePrice?: Maybe<Int>;
}

export interface MetadataUpdateInput {
  date?: Maybe<DateTimeInput>;
  pasePrice?: Maybe<Int>;
  viajePrice?: Maybe<Int>;
}

export interface MetadataUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  pasePrice?: Maybe<Int>;
  viajePrice?: Maybe<Int>;
}

export interface UserUpdateInput {
  uid?: Maybe<String>;
  dni?: Maybe<Int>;
  viajes?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  uid?: Maybe<String>;
  dni?: Maybe<Int>;
  viajes?: Maybe<Int>;
}

export interface LogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LogWhereInput>;
  AND?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
  OR?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
  NOT?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
}

export interface MetadataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MetadataWhereInput>;
  AND?: Maybe<
    MetadataSubscriptionWhereInput[] | MetadataSubscriptionWhereInput
  >;
  OR?: Maybe<MetadataSubscriptionWhereInput[] | MetadataSubscriptionWhereInput>;
  NOT?: Maybe<
    MetadataSubscriptionWhereInput[] | MetadataSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Log {
  id: ID_Output;
  type: LogType;
  date: DateTimeOutput;
  data?: Json;
}

export interface LogPromise extends Promise<Log>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<LogType>;
  date: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface LogSubscription
  extends Promise<AsyncIterator<Log>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<LogType>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface LogNullablePromise extends Promise<Log | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<LogType>;
  date: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface User {
  id: ID_Output;
  uid: String;
  dni: Int;
  viajes?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  dni: () => Promise<Int>;
  viajes: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  dni: () => Promise<AsyncIterator<Int>>;
  viajes: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  dni: () => Promise<Int>;
  viajes: () => Promise<Int>;
}

export interface LogConnection {
  pageInfo: PageInfo;
  edges: LogEdge[];
}

export interface LogConnectionPromise
  extends Promise<LogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LogEdge>>() => T;
  aggregate: <T = AggregateLogPromise>() => T;
}

export interface LogConnectionSubscription
  extends Promise<AsyncIterator<LogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLogSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LogEdge {
  node: Log;
  cursor: String;
}

export interface LogEdgePromise extends Promise<LogEdge>, Fragmentable {
  node: <T = LogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LogEdgeSubscription
  extends Promise<AsyncIterator<LogEdge>>,
    Fragmentable {
  node: <T = LogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLog {
  count: Int;
}

export interface AggregateLogPromise
  extends Promise<AggregateLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLogSubscription
  extends Promise<AsyncIterator<AggregateLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Metadata {
  id: ID_Output;
  date: DateTimeOutput;
  pasePrice?: Int;
  viajePrice?: Int;
}

export interface MetadataPromise extends Promise<Metadata>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  pasePrice: () => Promise<Int>;
  viajePrice: () => Promise<Int>;
}

export interface MetadataSubscription
  extends Promise<AsyncIterator<Metadata>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  pasePrice: () => Promise<AsyncIterator<Int>>;
  viajePrice: () => Promise<AsyncIterator<Int>>;
}

export interface MetadataNullablePromise
  extends Promise<Metadata | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  pasePrice: () => Promise<Int>;
  viajePrice: () => Promise<Int>;
}

export interface MetadataConnection {
  pageInfo: PageInfo;
  edges: MetadataEdge[];
}

export interface MetadataConnectionPromise
  extends Promise<MetadataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MetadataEdge>>() => T;
  aggregate: <T = AggregateMetadataPromise>() => T;
}

export interface MetadataConnectionSubscription
  extends Promise<AsyncIterator<MetadataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MetadataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMetadataSubscription>() => T;
}

export interface MetadataEdge {
  node: Metadata;
  cursor: String;
}

export interface MetadataEdgePromise
  extends Promise<MetadataEdge>,
    Fragmentable {
  node: <T = MetadataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MetadataEdgeSubscription
  extends Promise<AsyncIterator<MetadataEdge>>,
    Fragmentable {
  node: <T = MetadataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMetadata {
  count: Int;
}

export interface AggregateMetadataPromise
  extends Promise<AggregateMetadata>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMetadataSubscription
  extends Promise<AsyncIterator<AggregateMetadata>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LogSubscriptionPayload {
  mutation: MutationType;
  node: Log;
  updatedFields: String[];
  previousValues: LogPreviousValues;
}

export interface LogSubscriptionPayloadPromise
  extends Promise<LogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LogPreviousValuesPromise>() => T;
}

export interface LogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LogPreviousValuesSubscription>() => T;
}

export interface LogPreviousValues {
  id: ID_Output;
  type: LogType;
  date: DateTimeOutput;
  data?: Json;
}

export interface LogPreviousValuesPromise
  extends Promise<LogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LogType>;
  date: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface LogPreviousValuesSubscription
  extends Promise<AsyncIterator<LogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<LogType>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface MetadataSubscriptionPayload {
  mutation: MutationType;
  node: Metadata;
  updatedFields: String[];
  previousValues: MetadataPreviousValues;
}

export interface MetadataSubscriptionPayloadPromise
  extends Promise<MetadataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MetadataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MetadataPreviousValuesPromise>() => T;
}

export interface MetadataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MetadataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MetadataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MetadataPreviousValuesSubscription>() => T;
}

export interface MetadataPreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  pasePrice?: Int;
  viajePrice?: Int;
}

export interface MetadataPreviousValuesPromise
  extends Promise<MetadataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  pasePrice: () => Promise<Int>;
  viajePrice: () => Promise<Int>;
}

export interface MetadataPreviousValuesSubscription
  extends Promise<AsyncIterator<MetadataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  pasePrice: () => Promise<AsyncIterator<Int>>;
  viajePrice: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  uid: String;
  dni: Int;
  viajes?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  dni: () => Promise<Int>;
  viajes: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  dni: () => Promise<AsyncIterator<Int>>;
  viajes: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "LogType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Log",
    embedded: false
  },
  {
    name: "Metadata",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
